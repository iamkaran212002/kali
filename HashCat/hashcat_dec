
# Decompiled by HTR-TECH | TAHMID RAYAT
#---------------------------------------
# Source File : 1
# Time : Wed May 12 05:50:46 2021
#---------------------------------------
# uncompyle6 version 3.7.4
# Python bytecode 2.7
# Decompiled from: Python 2.7.16 (default, Oct 10 2019, 22:02:15) 
# [GCC 8.3.0]
# Embedded file name: sumarr
import sys, hashlib, time, os, random, binascii
from urllib import urlopen, urlencode
from re import search
os.system('clear')
os.system('xdg-open https://www.facebook.com/darkhunter141/')
print ''
if sys.platform == 'linux' or sys.platform == 'linux2':
    BB = '\x1b[34;1m'
    YY = '\x1b[33;1m'
    GG = '\x1b[32;1m'
    WW = '\x1b[0;1m'
    RR = '\x1b[91;1m'
    CC = '\x1b[96m'
    B = '\x1b[94m'
    Y = '\x1b[93m'
    G = '\x1b[92m'
    W = '\x1b[0m'
    R = '\x1b[91m'
    C = '\x1b[96m'
    rand = (
     BB, YY, GG, WW, RR, CC)
    P = random.choice(rand)
else:
    if sys.platform == 'win32':
        BB = ''
        YY = ''
        GG = ''
        WW = ''
        RR = ''
        CC = ''
        B = ''
        Y = ''
        G = ''
        W = ''
        R = ''
        C = ''
        P = ''
    abir = R + '\n\xe2\x96\x88\xe2\x96\x88\xe2\x80\x81  \xe2\x96\x88\xe2\x96\x88\xe2\x80\x81 \xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x80\x81 \xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x80\x81\xe2\x96\x88\xe2\x96\x88\xe2\x80\x81  \xe2\x96\x88\xe2\x96\x88\xe2\x80\x81 \xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x80\x81 \xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x80\x81 \xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x80\x81\n\xe2\x96\x88\xe2\x96\x88\xe2\x80\x81  \xe2\x96\x88\xe2\x96\x88\xe2\x80\x81\xe2\x96\x88\xe2\x96\x88\xe2\x80\x81\xe2\x80\x81\xe2\x80\x81\xe2\x96\x88\xe2\x96\x88\xe2\x80\x81\xe2\x96\x88\xe2\x96\x88\xe2\x80\x81\xe2\x80\x81\xe2\x80\x81\xe2\x80\x81\xe2\x80\x81\xe2\x80\x81\xe2\x96\x88\xe2\x96\x88\xe2\x80\x81  \xe2\x96\x88\xe2\x96\x88\xe2\x80\x81\xe2\x96\x88\xe2\x96\x88\xe2\x80\x81\xe2\x80\x81\xe2\x80\x81\xe2\x80\x81\xe2\x80\x81\xe2\x80\x81\xe2\x96\x88\xe2\x96\x88\xe2\x80\x81\xe2\x80\x81\xe2\x80\x81\xe2\x96\x88\xe2\x96\x88\xe2\x80\x81\xe2\x80\x81\xe2\x80\x81\xe2\x80\x81\xe2\x96\x88\xe2\x96\x88\xe2\x80\x81\xe2\x80\x81\xe2\x80\x81\xe2\x80\x81\n\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x80\x81\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x80\x81\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x80\x81\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x80\x81\xe2\x96\x88\xe2\x96\x88\xe2\x80\x81     \xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x80\x81   \xe2\x96\x88\xe2\x96\x88\xe2\x80\x81   \n\xe2\x96\x88\xe2\x96\x88\xe2\x80\x81\xe2\x80\x81\xe2\x80\x81\xe2\x96\x88\xe2\x96\x88\xe2\x80\x81\xe2\x96\x88\xe2\x96\x88\xe2\x80\x81\xe2\x80\x81\xe2\x80\x81\xe2\x96\x88\xe2\x96\x88\xe2\x80\x81\xe2\x80\x81\xe2\x80\x81\xe2\x80\x81\xe2\x80\x81\xe2\x80\x81\xe2\x96\x88\xe2\x96\x88\xe2\x80\x81\xe2\x96\x88\xe2\x96\x88\xe2\x80\x81\xe2\x80\x81\xe2\x80\x81\xe2\x96\x88\xe2\x96\x88\xe2\x80\x81\xe2\x96\x88\xe2\x96\x88\xe2\x80\x81     \xe2\x96\x88\xe2\x96\x88\xe2\x80\x81\xe2\x80\x81\xe2\x80\x81\xe2\x96\x88\xe2\x96\x88\xe2\x80\x81   \xe2\x96\x88\xe2\x96\x88\xe2\x80\x81   \n\xe2\x96\x88\xe2\x96\x88\xe2\x80\x81  \xe2\x96\x88\xe2\x96\x88\xe2\x80\x81\xe2\x96\x88\xe2\x96\x88\xe2\x80\x81  \xe2\x96\x88\xe2\x96\x88\xe2\x80\x81\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x80\x81\xe2\x96\x88\xe2\x96\x88\xe2\x80\x81  \xe2\x96\x88\xe2\x96\x88\xe2\x80\x81\xe2\x80\x81\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x80\x81\xe2\x96\x88\xe2\x96\x88\xe2\x80\x81  \xe2\x96\x88\xe2\x96\x88\xe2\x80\x81   \xe2\x96\x88\xe2\x96\x88\xe2\x80\x81   \n\xe2\x80\x81\xe2\x80\x81\xe2\x80\x81  \xe2\x80\x81\xe2\x80\x81\xe2\x80\x81\xe2\x80\x81\xe2\x80\x81\xe2\x80\x81  \xe2\x80\x81\xe2\x80\x81\xe2\x80\x81\xe2\x80\x81\xe2\x80\x81\xe2\x80\x81\xe2\x80\x81\xe2\x80\x81\xe2\x80\x81\xe2\x80\x81\xe2\x80\x81\xe2\x80\x81\xe2\x80\x81\xe2\x80\x81  \xe2\x80\x81\xe2\x80\x81\xe2\x80\x81 \xe2\x80\x81\xe2\x80\x81\xe2\x80\x81\xe2\x80\x81\xe2\x80\x81\xe2\x80\x81\xe2\x80\x81\xe2\x80\x81\xe2\x80\x81\xe2\x80\x81  \xe2\x80\x81\xe2\x80\x81\xe2\x80\x81   \xe2\x80\x81\xe2\x80\x81\xe2\x80\x81   \n\n                                       \x1b[93m version : 1.0\n\n\n\x1b[0m             \x1b[0;37;41mAdvanced Hash Creaker Tool Termux\x1b[0m   \n\n\n \x1b[92m Author  : Dark Hunter 141\n \x1b[92m FB Page : Dark Hunter 141\n \x1b[92m Coded By: Ashrafi Abir (DarkXploit)\n           \x1b[92m Tanvir Mahamud Shariful (Dark Wolf) \n\n\n\n\n\x1b[95m----------------------> Dark Hunter 141 <--------------------\n\n'
    abir2 = '\x1b[0m                \x1b[0;37;41mAdvanced Web Penetration Testing Tool Termux\x1b[0m '
    abir3 = '\x1b[0m                      \x1b[0;37;41mCreated By Team Dark Hunter 141\x1b[0m '
    try:
        import progressbar
        from passlib.hash import mysql323 as m20
        from passlib.hash import mysql41 as m25
        from passlib.hash import mssql2000 as ms20
        from passlib.hash import mssql2005 as ms25
        from passlib.hash import nthash
        from passlib.hash import lmhash
    except ImportError:
        print abir
        time.sleep(0.5)
        print B + '[' + W + '=' + B + '] ' + G + 'installing module ' + R + 'progressbar , passlib\n' + W
        os.system('pip2 install --upgrade pip')
        os.system('pip2 install passlib')
        os.system('pip2 install progressbar')
        print B + '\n[' + W + '\xe2\x9c\x93' + B + '] ' + G + 'Install success , run program again\n' + W
        sys.exit()

    def hash():
        print abir
        hash_str = raw_input(Y + '[' + W + '+' + Y + ']' + C + ' Paste Your Hash : ' + W)
        print Y + '[' + R + '\xe2\x9c\x93' + Y + '] ' + C + '  Enter The Hash Type .....'
        SHA512 = 'dd0ada8693250b31d9f44f3ec2d4a106003a6ce67eaa92e384b356d1b4ef6d66a818d47c1f3a2c6e8a9a9b9bdbd28d485e06161ccd0f528c8bbb5541c3fef36f'
        md = 'ae11fd697ec92c7c98de3fac23aba525'
        sha1 = '4a1d4dbc1e193ec3ab2e9213876ceb8f4db72333'
        sha224 = 'e301f414993d5ec2bd1d780688d37fe41512f8b57f6923d054ef8e59'
        sha384 = '3b21c44f8d830fa55ee9328a7713c6aad548fe6d7a4a438723a0da67c48c485220081a2fbc3e8c17fd9bd65f8d4b4e6b'
        sha256 = '2c740d20dab7f14ec30510a11f8fd78b82bc3a711abe8a993acdb323e78e6d5e'
        mysql1323 = '5d2e19393cc5ef67'
        mysql41 = '*88166B019A3144C579AC4A7131BCC3AD6FF61DA6'
        mssql2000 = '0x0100DE9B3306258B37432CAC3A6FB7C638946FA393E09C9CBC0FA8C6E03B803390B1C3E7FB112A21B2304595D490'
        mssql2005 = '0x01008110620C7BD03A38A28A3D1D032059AE9F2F94F3B74397F8'
        if len(hash_str) == len(mysql1323) and hash_str.isdigit() == False and hash_str.isalpha() == False and hash_str.isalnum() == True:
            print Y + '[' + R + '+' + Y + '] ' + C + 'Hash Type : ' + W + 'mysql 3.2.3'
            hash = 'mysql1323'
        else:
            if len(hash_str) == len(mysql41) and '*' in hash_str:
                print Y + '[' + R + '=' + Y + '] ' + G + 'Hash Type : ' + W + 'mysql 4.1'
                hash = 'mysql41'
            else:
                if len(hash_str) == len(mssql2000) and '0x0' in hash_str:
                    print B + '[' + R + '=' + B + '] ' + G + 'Hash Type : ' + W + 'Mssql2000'
                    hash = 'mssql2000'
                elif len(hash_str) == len(mssql2005) and '0x0' in hash_str:
                    print B + '[' + R + '=' + B + '] ' + G + 'Hash Type : ' + W + 'Mssql2005'
                    hash = 'mssql2005'
                elif len(hash_str) == len(SHA512) and hash_str.isdigit() == False and hash_str.isalpha() == False and hash_str.isalnum() == True:
                    print Y + '   [' + W + '01' + Y + '] ' + C + 'sha512'
                    print Y + '   [' + W + '02' + Y + '] ' + C + 'whirlpool'
                    cek = raw_input(B + '[' + W + '?' + B + '] ' + G + 'Choose hash ' + Y + '>>> ' + W)
                    if cek == '1' or cek == '01' or cek == 'sha512':
                        hash = 'sha512'
                    elif cek == '2' or cek == '02' or cek == 'whirlpool':
                        hash = 'whirlpool'
                    else:
                        print R + '[' + W + '!' + R + '] ' + G + 'Exiting ... \n'
                        sys.exit()
                elif len(hash_str) == len(md) and hash_str.isdigit() == False and hash_str.isalpha() == False and hash_str.isalnum() == True:
                    print Y + '   [' + W + '01' + Y + '] ' + C + 'MD4'
                    print Y + '   [' + W + '02' + Y + '] ' + C + 'MD5'
                    cek = raw_input(B + '[' + W + '?' + B + '] ' + G + 'Choose Hash ' + Y + '>>> ' + W)
                    if cek == '1' or cek == '01' or cek == 'md4' or cek == 'MD4' or cek == 'Md4':
                        hash = 'md4'
                    elif cek == '2' or cek == '02' or cek == 'md5' or cek == 'MD5' or cek == 'Md5':
                        try:
                            print B + '[' + R + '=' + B + '] ' + G + 'Open Google'
                            print B + '[' + W + '*' + B + '] ' + G + 'Start ...'
                            start = '00:00:00'
                            start1 = time.time()
                            print (B + '\n[' + W + '{}' + B + '] ' + G + 'Searching...' + Y).format(start)
                            data = urlencode({'md5': hash_str, 'x': '21', 'y': '8'})
                            html = urlopen('http://md5.my-addr.com/md5_decrypt-md5_cracker_online/md5_decoder_tool.php', data)
                            find = html.read()
                            match = search("<span class='middle_title'>Hashed string</span>: [^<]*</div>", find)
                            if match:
                                end = time.strftime('%H:%M:%S', time.gmtime(time.time() - start1))
                                print (B + '[' + W + '{}' + B + '] ' + G + 'Stopped...').format(end)
                                print B + '\n[' + W + '\xe2\x9c\x93' + B + ']' + G + '   Password Found '
                                print B + '[' + W + '+' + B + '] ' + W + hash_str + Y + '  ==> ' + W + match.group().split('span')[2][3:-6] + '\n'
                                sys.exit()
                            else:
                                data = urlencode({'md5': hash_str, 'x': '21', 'y': '8'})
                                html = urlopen('http://md5.my-addr.com/md5_decrypt-md5_cracker_online/md5_decoder_tool.php', data)
                                find = html.read()
                                match = search("<span class='middle_title'>Hashed string</span>: [^<]*</div>", find)
                                if match:
                                    end = time.strftime('%H:%M:%S', time.gmtime(time.time() - start1))
                                    print (B + '[' + W + '{}' + B + '] ' + G + 'Stopped...').format(end)
                                    print B + '\n[' + W + '\xe2\x9c\x93' + B + ']' + G + '   Password Found '
                                    print B + ' [' + W + '+' + B + '] ' + W + hash_str + Y + '  ==> ' + W + match.group().split('span')[2][3:-6] + W + ' \n'
                                    sys.exit()
                                else:
                                    url = 'http://www.nitrxgen.net/md5db/' + hash_str
                                    cek = urlopen(url).read()
                                    if len(cek) > 0:
                                        end = time.strftime('%H:%M:%S', time.gmtime(time.time() - start1))
                                        print (B + '[' + W + '{}' + B + '] ' + G + 'Stopped...').format(end)
                                        print B + '\n[' + W + '\xe2\x9c\x93' + B + ']' + G + '   Password Found '
                                        print B + '[' + W + '+' + B + '] ' + W + hash_str + Y + '  ==> ' + W + cek + '\n'
                                        sys.exit()
                                    else:
                                        end = time.strftime('%H:%M:%S', time.gmtime(time.time() - start1))
                                        print (B + '[' + W + '{}' + B + ']' + G + ' [\xc3\x97] Password Not Found\n').format(end)
                                        hash = 'md5'
                        except IOError:
                            end = time.strftime('%H:%M:%S', time.gmtime(time.time() - start1))
                            print (B + '[' + W + '{}' + B + ']' + G + ' Timeout\n').format(end)
                            hash = 'md5'

                    elif cek == '03' or cek == '3' or cek.upper() == 'NTHASH':
                        hash = 'nthash'
                    elif cek == '04' or cek == '4' or cek.upper() == 'LMHASH':
                        hash = 'lmhash'
                    elif cek == '05' or cek == '5' or cek.upper() == 'NTLM':
                        hash = 'ntlm'
                    else:
                        print R + '[' + W + '!' + R + '] ' + G + 'Exiting ... \n' + W
                        sys.exit()
                elif len(hash_str) == len(sha1) and hash_str.isdigit() == False and hash_str.isalpha() == False and hash_str.isalnum() == True:
                    print Y + '   [' + W + '01' + Y + '] ' + C + 'sha1'
                    print Y + '   [' + W + '02' + Y + '] ' + C + 'ripemd160'
                    cek = raw_input(B + '[' + W + '?' + B + '] ' + G + 'Choose Hash ' + Y + '>>> ' + W)
                    if cek == '1' or cek == '01' or cek == 'sha1' or cek == 'SHA1' or cek == 'Sha1':
                        print B + '[' + R + '=' + B + '] ' + G + 'Open Google'
                        print B + '[' + W + '*' + B + '] ' + G + 'Start ...'
                        start = '00:00:00'
                        start1 = time.time()
                        print (B + '\n[' + W + '{}' + B + '] ' + G + 'Searching...' + Y).format(start)
                        try:
                            data = urlencode({'auth': '8272hgt', 'hash': hash_str, 'string': '', 'Submit': 'Submit'})
                            html = urlopen('http://hashcrack.com/index.php', data)
                            find = html.read()
                            match = search('<span class=hervorheb2>[^<]*</span></div></TD>', find)
                            if match:
                                end = time.strftime('%H:%M:%S', time.gmtime(time.time() - start1))
                                print (B + '[' + W + '{}' + B + '] ' + G + 'Stopped...').format(end)
                                print B + '\n[' + W + '\xe2\x9c\x93' + B + ']' + G + '   Password Found '
                                print B + '[' + W + '+' + B + '] ' + W + hash_str + Y + '  ==> ' + W + match.group().split('hervorheb2>')[1][:-18] + '\n'
                                sys.exit()
                            else:
                                end = time.strftime('%H:%M:%S', time.gmtime(time.time() - start1))
                                print B + '[' + W + '{}' + B + ']' + G + ' [\xc3\x97] Password Not Found\n'
                                hash = 'sha1'
                        except IOError:
                            end = time.strftime('%H:%M:%S', time.gmtime(time.time() - start1))
                            print (B + '[' + W + '{}' + B + ']' + G + ' Timeout\n').format(end)
                            hash = 'sha1'

                    elif cek == '2' or cek == '02' or cek == 'ripemd160':
                        hash = 'ripemd160'
                    else:
                        print R + '[' + W + '!' + R + '] ' + G + 'Exiting ... \n' + W
                        sys.exit()
                elif len(hash_str) == len(sha224) and hash_str.isdigit() == False and hash_str.isalpha() == False and hash_str.isalnum() == True:
                    print B + '[' + R + '=' + B + '] ' + G + 'hash type : ' + W + 'SHA224'
                    hash = 'SHA224'
                elif len(hash_str) == len(sha384) and hash_str.isdigit() == False and hash_str.isalpha() == False and hash_str.isalnum() == True:
                    print B + '[' + R + '=' + B + '] ' + G + 'hash type : ' + W + 'SHA384'
                    hash = 'SHA384'
                elif len(hash_str) == len(sha256) and hash_str.isdigit() == False and hash_str.isalpha() == False and hash_str.isalnum() == True:
                    print B + '[' + R + '=' + B + '] ' + G + 'hash type : ' + W + 'sha256'
                    print B + '[' + R + '=' + B + '] ' + G + 'Open Google'
                    print B + '[' + W + '*' + B + '] ' + G + 'Start ...'
                    start = '00:00:00'
                    start1 = time.time()
                    print (B + '\n[' + W + '{}' + B + '] ' + G + 'Searching...' + Y).format(start)
                    try:
                        data = urlencode({'hash': hash_str, 'decrypt': 'Decrypt'})
                        html = urlopen('http://md5decrypt.net/en/Sha256/', data)
                        find = html.read()
                        match = search('<b>[^<]*</b><br/><br/>', find)
                        if match:
                            end = time.strftime('%H:%M:%S', time.gmtime(time.time() - start1))
                            print (B + '[' + W + '\xc3\x97' + B + '] ' + G + 'Stopped...').format(end)
                            print B + '\n[' + W + '\xe2\x9c\x93' + B + ']' + G + '   Password Found '
                            print B + '[' + W + '+' + B + '] ' + W + hash_str + Y + '  ==> ' + W + match.group().split('<b>')[1][:-14] + '\n'
                            sys.exit()
                        else:
                            end = time.strftime('%H:%M:%S', time.gmtime(time.time() - start1))
                            print (B + '[' + W + '\xc3\x97' + B + ']' + G + ' [\xc3\x97] Password Not Found\n').format(end)
                            hash = 'sha256'
                    except IOError:
                        end = time.strftime('%H:%M:%S', time.gmtime(time.time() - start1))
                        print (B + '[' + W + '{}' + B + ']' + G + ' Timeout\n').format(end)
                        hash = 'sha256'

                else:
                    print R + '[' + W + '\xc3\x97' + R + '] ' + G + 'Hash error\n' + W
                    sys.exit()
                time.sleep(0.1)
                print B + '[' + W + '\xe2\x9c\x93' + B + '] ' + G + 'Check From Database'
                try:
                    w = open('wordlist.txt', 'r').readlines()
                    x = len(w)
                except IOError:
                    print B + '[' + R + '=' + B + ']' + G + " Can't load " + W + 'wordlist.txt, ' + G + 'file not exist\n' + W
                    sys.exit()

            print (B + '[' + R + '=' + B + '] ' + G + 'load ' + W + '{}' + G + ' words in ' + W + 'wordlist.txt').format(x)
            print B + '[' + W + '*' + B + '] ' + G + 'start ..\n'
            start = '00:00:00'
            start1 = time.time()
            print (B + '[' + W + '{}' + B + '] ' + G + 'Cracking...' + Y).format(start)
            pbar = progressbar.ProgressBar()
            if hash == 'mysql1323':
                hash_str = hash_str.lower()
                for line in pbar(w):
                    line = line.strip()
                    h = m20.encrypt(line)
                    if h == hash_str:
                        end = time.strftime('%H:%M:%S', time.gmtime(time.time() - start1))
                        print (B + '\n[' + W + '{}' + B + '] ' + G + 'Stopped...\n').format(end)
                        print B + '[' + W + '=' + B + ']' + G + '  [\xe2\x9c\x93] Password Found '
                        print B + '[' + R + '+' + B + '] ' + W + hash_str + Y + '  ==> ' + W + line + W + '\n'
                        sys.exit()

                end = time.strftime('%H:%M:%S', time.gmtime(time.time() - start1))
                print (B + '[' + W + '{}' + B + ']' + G + ' [\xc3\x97] Password Not Found\n' + W).format(end)
                sys.exit()
            elif hash == 'lmhash':
                hasb_str = hash_str.upper()
                for line in pbar(w):
                    line = line.strip()
                    h = lmhash.encrypt(line)
                    if h == hash_str:
                        end = time.strftime('%H:%M:%S', time.gmtime(time.time() - start1))
                        print (B + '\n[' + W + '{}' + B + '] ' + G + 'Stopped...\n').format(end)
                        print B + '[' + W + '=' + B + ']' + G + '  [\xe2\x9c\x93] Password Found '
                        print B + '[' + R + '+' + B + '] ' + W + hash_str + Y + '  ==> ' + W + line + W + '\n'
                        sys.exit()

                end = time.strftime('%H:%M:%S', time.gmtime(time.time() - start1))
                print (B + '[' + W + '{}' + B + ']' + G + ' [\xc3\x97] Password Not Found\n' + W).format(end)
                sys.exit()
            elif hash == 'nthash':
                hasb_str = hash_str.upper()
                for line in pbar(w):
                    line = line.strip()
                    h = nthash.encrypt(line)
                    if h == hash_str:
                        end = time.strftime('%H:%M:%S', time.gmtime(time.time() - start1))
                        print (B + '\n[' + W + '{}' + B + '] ' + G + 'Stopped...\n').format(end)
                        print B + '[' + W + '=' + B + ']' + G + '  [\xe2\x9c\x93] Password Found '
                        print B + '[' + R + '+' + B + '] ' + W + hash_str + Y + '  ==> ' + W + line + W + '\n'
                        sys.exit()

                end = time.strftime('%H:%M:%S', time.gmtime(time.time() - start1))
                print (B + '[' + W + '{}' + B + ']' + G + ' [\xc3\x97] Password Not Found\n' + W).format(end)
                sys.exit()
            elif hash == 'mysql41':
                hash_str = hash_str.upper()
                for line in pbar(w):
                    line = line.strip()
                    h = m25.encrypt(line)
                    if h == hash_str:
                        end = time.strftime('%H:%M:%S', time.gmtime(time.time() - start1))
                        print (B + '\n[' + W + '{}' + B + '] ' + G + 'Stopped...\n').format(end)
                        print B + '[' + W + '=' + B + ']' + G + '  [\xe2\x9c\x93] Password Found '
                        print B + '[' + R + '+' + B + '] ' + W + hash_str + Y + '  ==> ' + W + line + W + '\n'
                        sys.exit()

                end = time.strftime('%H:%M:%S', time.gmtime(time.time() - start1))
                print (B + '[' + W + '{}' + B + ']' + G + ' [\xc3\x97] Password Not Found\n' + W).format(end)
                sys.exit()
            elif hash == 'mssql2000':
                hash_str = hash_str.upper()
                for line in pbar(w):
                    line = line.strip()
                    h = ms20.encrypt(line)
                    if h == hash_str:
                        end = time.strftime('%H:%M:%S', time.gmtime(time.time() - start1))
                        print (B + '\n[' + W + '{}' + B + '] ' + G + 'Stopped...\n').format(end)
                        print B + '[' + W + '=' + B + ']' + G + '  [\xe2\x9c\x93] Password Found '
                        print B + '[' + R + '+' + B + '] ' + W + hash_str + Y + '  ==> ' + W + line + W + '\n'
                        sys.exit()

                end = time.strftime('%H:%M:%S', time.gmtime(time.time() - start1))
                print (B + '[' + W + '{}' + B + ']' + G + ' [\xc3\x97] Password Not Found\n' + W).format(end)
                sys.exit()
            elif hash == 'ntlm':
                hash_str = hash_str.lower()
                for line in pbar(w):
                    line = line.strip()
                    h = ntlm_hash = binascii.hexlify(hashlib.new('md4', line.encode('utf-16le')).digest())
                    if h == hash_str:
                        end = time.strftime('%H:%M:%S', time.gmtime(time.time() - start1))
                        print (B + '\n[' + W + '{}' + B + '] ' + G + 'Stopped...\n').format(end)
                        print B + '[' + W + '=' + B + ']' + G + '  [\xe2\x9c\x93] Password Found '
                        print B + '[' + R + '+' + B + '] ' + W + hash_str + Y + '  ==> ' + W + line + W + '\n'
                        sys.exit()

                end = time.strftime('%H:%M:%S', time.gmtime(time.time() - start1))
                print (B + '[' + W + '{}' + B + ']' + G + ' [\xc3\x97] Password Not Found\n' + W).format(end)
                sys.exit()
            else:
                if hash == 'mssql2005':
                    hasb_str = hash_str.upper()
                    for line in pbar(w):
                        line = line.strip()
                        h = ms25.encrypt(line)
                        if h == hash_str:
                            end = time.strftime('%H:%M:%S', time.gmtime(time.time() - start1))
                            print (B + '\n[' + W + '{}' + B + '] ' + G + 'Stopped...\n').format(end)
                            print B + '' + W + 'e3afed0047b08059d0fada10f400c1e5' + B + ']' + G + '  [\xe2\x9c\x93] Password Found '
                            print B + '[' + R + '+' + B + '] ' + W + hash_str + Y + '==> ' + W + line + W + '\n'
                            sys.exit()

                    end = time.strftime('%H:%M:%S', time.gmtime(time.time() - start1))
                    print (B + '[' + W + '{}' + B + ']' + G + ' [\xc3\x97] Password Not Found\n' + W).format(end)
                    sys.exit()
                else:
                    hash_str = hash_str.lower()
                    for line in pbar(w):
                        line = line.strip()
                        h = hashlib.new(hash)
                        h.update(line)
                        if h.hexdigest() == hash_str:
                            end = time.strftime('%H:%M:%S', time.gmtime(time.time() - start1))
                            print (B + '\n[' + W + '{}' + B + '] ' + G + 'Stopped...\n').format(end)
                            print B + '[' + W + '=' + B + ']' + G + '  [\xe2\x9c\x93] Password Found '
                            print B + '[' + R + '+' + B + '] ' + W + hash_str + Y + '  ==> ' + W + line + W + '\n'
                            sys.exit()

                end = time.strftime('%H:%M:%S', time.gmtime(time.time() - start1))
                print (B + '' + W + '' + B + '' + G + ' [\xc3\x97] Password Not Found\n' + W).format(end)
                sys.exit()


    try:
        if sys.argv[1] == '-u':
            Update()
        elif sys.argv[1] == '-i' or sys.argv[1] == '--info':
            info()
        else:
            print R + '[' + W + '!' + R + '] ' + G + 'Command Error !!' + W
            sys.exit()
    except IndexError:
        hash()